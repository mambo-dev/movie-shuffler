import Head from "next/head";
import Image from "next/image";
import ToolTip from "../components/tooltip";
import { AnimatePresence, motion } from "framer-motion";
import { useState } from "react";

const images = [
  {
    id: 1,
    image_link: "/images/example.png",
  },
  {
    id: 2,
    image_link: "/images/how.png",
  },
  {
    id: 3,
    image_link: "/images/now.png",
  },
  {
    id: 4,
    image_link: "/images/another.png",
  },
];
export default function Home() {
  const [currentImage, setCurrentImage] = useState(0);
  console.log(images.length);
  const halfOfImages = images.slice(currentImage, images.length / 2);
  const [shuffleEnd, setShuffleEnd] = useState(true);
  const handleNext = () => {
    images.length - 1 === currentImage
      ? setCurrentImage(0)
      : setCurrentImage((currentImage) => (currentImage += 1));
  };
  console.log(images[currentImage]?.id === currentImage + 1);
  const handlePrevious = () => {
    currentImage === 0
      ? setCurrentImage(images.length - 1)
      : setCurrentImage((currentImage) => (currentImage -= 1));
  };

  const handleShuffle = () => {
    let myInterval = setInterval(() => {
      setCurrentImage(Math.floor(Math.random() * images.length));
    }, 50);

    setTimeout(() => {
      clearInterval(myInterval);
      setShuffleEnd(true);
    }, 4000);

    setTimeout(() => {
      setShuffleEnd(false);
    }, 7000);
  };

  console.log(shuffleEnd && images[currentImage]?.id === currentImage + 1);
  return (
    <>
      <Head>
        <title>thee show shuffler</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-full min-h-screen bg-black/90">
        <header className="w-full bg-black/90 h-14 shadow-md flex items-center px-2 shadow-gray-700">
          <div>
            <span className="text-gray-50">Show Shuffle</span>
          </div>
        </header>
        <div className="w-full h-screen py-4 flex flex-col items-center justify-center">
          <div className="w-full h-fit py-2 flex items-center justify-center md:justify-end gap-x-4 px-1 md:px-4 font-semibold">
            <button
              onClick={handleShuffle}
              className="inline-flex items-center justify-center text-white px-2 h-9 bg-green-700 hover:bg-green-600 rounded w-24"
            >
              shuffle
            </button>
            <button className="inline-flex hover:bg-gray-500 items-center  h-9 justify-center text-white px-2 py-1 bg-transparent border border-slate-300 rounded ">
              add show
            </button>
          </div>

          <div className="w-full h-[90%]   flex flex-col items-center justify-center gap-y-4">
            <div className="w-full flex items-center justify-center margin-auto">
              <span className="text-gray-200 font-semibold ">
                today you are watching...
              </span>
            </div>
            <div className="w-full py-2 px-2 overflow-hidden relative flex items-center justify-center gap-x-4 h-3/5">
              <AnimatePresence>
                <motion.div
                  initial={{ x: 300, opacity: 0 }}
                  animate={{ x: 0, opacity: 1 }}
                  exit={{ opacity: 0, x: -300 }}
                  transition={{ duration: 0.5 }}
                  className={`${
                    shuffleEnd && images[currentImage]?.id === currentImage + 1
                      ? "border relative border-slate-200 nimate-spin w-64 h-64  rounded-full"
                      : "rounded-lg w-3/4 md:w-[450px] "
                  }  `}
                >
                  <motion.img
                    src={images[currentImage]?.image_link}
                    alt="shuffle-pic"
                    className={`${
                      shuffleEnd &&
                      images[currentImage]?.id === currentImage + 1 &&
                      "w-full h-full rounded-full"
                    } w-full h-full rounded-lg `}
                  />
                  <p></p>
                  {shuffleEnd &&
                    images[currentImage]?.id === currentImage + 1 && (
                      <span className="w-24 h-24 bg-black rounded-full absolute top-1/2 bottom-1/2 right-1/2 left-1/2">
                        .
                      </span>
                    )}
                </motion.div>
              </AnimatePresence>
            </div>
            <div className="w-1/2  flex items-center justify-center gap-x-4">
              <button
                onClick={handlePrevious}
                className={`inline-flex group relative items-center disabled:bg-gray-800 justify-center w-12 h-12 rounded-full bg-black bg-opacity-10 hover:bg-opacity-50 text-gray-100`}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="w-6 h-6"
                >
                  <motion.path
                    variants={{
                      hidden: {
                        pathLength: 0,
                        fill: "rgba(255, 255, 255, 0)",
                      },
                      visible: {
                        pathLength: 1,
                        fill: "rgba(255, 255, 255, 1)",
                      },
                    }}
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M19.5 12h-15m0 0l6.75 6.75M4.5 12l6.75-6.75"
                  />
                </svg>
              </button>
              <button
                onClick={handleShuffle}
                className="inline-flex items-center disabled:bg-opacity-10 justify-center w-14 h-14 rounded-full bg-green-600  hover:bg-opacity-50 text-gray-100"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="w-6 h-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99"
                  />
                </svg>
              </button>
              <button
                onClick={handleNext}
                className=" inline-flex items-center disabled:bg-gray-800 justify-center w-12 h-12 rounded-full bg-black bg-opacity-10 hover:bg-opacity-50 text-gray-100"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="w-6 h-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75"
                  />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}

const ImageComponent = ({ currentImage, shuffleEnd }: any) => {
  return (
    <AnimatePresence>
      <motion.img
        initial={{ x: 300, opacity: 0 }}
        animate={{ x: 0, opacity: 1 }}
        exit={{ opacity: 0, x: -300 }}
        src={images[currentImage]?.image_link}
        alt="shuffle-pic"
        className={`${
          shuffleEnd && images[currentImage]?.id === currentImage + 1
            ? "animate-pulse"
            : "animate-pulse"
        } rounded-lg w-3/4 md:w-[450px]  `}
      />
    </AnimatePresence>
  );
};
